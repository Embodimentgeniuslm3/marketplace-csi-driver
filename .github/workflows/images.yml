name: Image publish
on:
  push:
    branches:
      - main
      - feature-pipeline
jobs:
  publish:
    name: Publish
    runs-on: ubuntu-20.04
    defaults:
      run:
        shell: bash
    steps:
    - name: Checkout code
      uses: actions/checkout@v2
    - name: Install Go
      uses: actions/setup-go@v2
      with:
        go-version: 1.15.6
    - name: Cache Go modules
      uses: actions/cache@v2
      with:
        path: ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: ${{ runner.os }}-1.15.6-go-
    - name: Install Dependencies
      run: |-
        os=$(go env GOOS)
        arch=$(go env GOARCH)
        # download kubebuilder and extract it to tmp
        curl -L https://go.kubebuilder.io/dl/2.3.1/${os}/${arch} | tar -xz -C /tmp/
        # move to a long-term location and put it on your path
        # (you'll need to set the KUBEBUILDER_ASSETS env var if you put it somewhere else)
        sudo mv /tmp/kubebuilder_2.3.1_${os}_${arch} /usr/local/kubebuilder
        echo "/usr/local/kubebuilder/bin" >> $GITHUB_PATH
        go get -u github.com/go-bindata/go-bindata/...
    - name: Test Operator
      run: |-
        cd operator
        make testci
    - name: Test Driver
      run: |-
        cd driver
        make test
    - name: Set up buildx
      uses: docker/setup-buildx-action@v1
      with:
        install: true
    - name: Login to Docker Hub
      uses: docker/login-action@v1
      with:
        registry: quay.io/grishgo
        username: ${{ secrets.RHM_QUAY_USER }}
        password: ${{ secrets.RHM_QUAY_PASSWORD }}
    - name: Publish base image
      run: |-
        readonly local last_commit_log=$(git log -1 --pretty=format:"%s")
        echo "last commit log: $last_commit_log"
        if [[ ${last_commit_log} =~ .*publishbase.* ]]; then
          echo "Publish base image"
          cd driver
          make docker-publish-base
        else
          echo "Skip publish base image"
        fi
    - name: Publish driver image
      run: |-
        readonly local last_commit_log=$(git log -1 --pretty=format:"%s")
        if ! [[ ${last_commit_log} =~ .*skipdriver.* ]]; then
          echo "Publish driver image"
          cd driver
          make docker-publish
        else
          echo "Skip publish driver image"
        fi
    - name: Publish operator image
      run: |-
        readonly local last_commit_log=$(git log -1 --pretty=format:"%s")
        if ! [[ ${last_commit_log} =~ .*skipoperator.* ]]; then
          echo "Publish operator image"
          cd operator
          make docker-publish
        else
          echo "Skip publish operator image"
        fi
    - name: Publish bundle image
      run: |-
        readonly local last_commit_log=$(git log -1 --pretty=format:"%s")
        if ! [[ ${last_commit_log} =~ .*skipbundle.* ]]; then
          echo "Publish bundle image"

          export ARCH=$(case $(arch) in x86_64) echo -n amd64 ;; aarch64) echo -n arm64 ;; *) echo -n $(arch) ;; esac)
          export OS=$(uname | awk '{print tolower($0)}')
          export OPERATOR_SDK_DL_URL=https://github.com/operator-framework/operator-sdk/releases/latest/download
          curl -LO ${OPERATOR_SDK_DL_URL}/operator-sdk_${OS}_${ARCH}
          curl -LO ${OPERATOR_SDK_DL_URL}/checksums.txt
          curl -LO ${OPERATOR_SDK_DL_URL}/checksums.txt.asc
          echo "CHECKSUM"
          grep operator-sdk_${OS}_${ARCH} checksums.txt
          grep operator-sdk_${OS}_${ARCH} checksums.txt | sha256sum -c -
          chmod +x operator-sdk_${OS}_${ARCH} && sudo mv operator-sdk_${OS}_${ARCH} /usr/local/bin/operator-sdk
          curl -LO https://github.com/operator-framework/operator-registry/releases/download/v1.15.3/${OS}-${ARCH}-opm
          chmod +x ${OS}-${ARCH}-opm && sudo mv ${OS}-${ARCH}-opm /usr/local/bin/opm

          cd operator
          make bundle
          make bundle-push
        else
          echo "Skip publish operator image"
        fi